name: release

on:
  release:
    types: [published]

jobs:
  build-windows:
    name: Windows (${{ matrix.config.target }})
    permissions:
        contents: write
        packages: write
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - {target: x64,     build: win64 }
          - {target: Win32,   build: win32 }
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.config.target }}
      - uses: actions/checkout@v4
      - name: Configure
        run: |
            mkdir build
            cd build
            cmake .. -D BUILD_TESTING=OFF -A ${{ matrix.config.target }}
      - name: Build & Create NSIS Installer from Release
        run: |
            cd build
            cmake --build . --config Release
            cpack --config CPackConfig.cmake -G NSIS
      - name: Upload the windows binary artifacts
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: built/Package/tcc-${{ github.event.release.tag_name }}-${{ matrix.config.build }}.exe
          asset_name: TinyCC_Installer_${{ matrix.config.build }}.exe
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: false

  build-macos:
    name: macOS
    permissions:
        contents: write
        packages: write
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v4
      - name: Find includes
        run: |
            brew install automake libtool
            gcc -v -xc++ /dev/null -fsyntax-only
            sudo ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
      - name: Configure & build
        run: |
            mkdir build
            cd build
            cmake -DCMAKE_BUILD_TYPE=Release -D BUILD_TESTING=OFF ..
            cmake --build .
      - name: Create DMG Installer from Release
        run: |
            cd build
            cpack -G DragNDrop
      - name: Upload the windows binary artifacts
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: built/Package/tcc-${{ github.event.release.tag_name }}-Darwin.dmg
          asset_name: TinyCC_Installer_macOS.dmg
          overwrite: true
          file_glob: false

  build-ubuntu:
    name: Debian ${{ matrix.target }}
    permissions:
        contents: write
        packages: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: amd64
            flags: -m64
        #  - target: i686
        #    flags: -m32
    steps:
      - uses: actions/checkout@v4
      - name: Prepare
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -q -y
          sudo apt-get install -y gcc-multilib g++-multilib valgrind libc6-dbg libc6-dbg:i386
      - name: Configure & build & Create DEB Installer from Release
        run: |
            mkdir build
            cd build
            cmake -DCMAKE_BUILD_TYPE=Release -D BUILD_TESTING=OFF -DCMAKE_C_FLAGS=${{ matrix.flags }} ..
            cmake --build .
            cpack --config CPackConfig.cmake -G DEB
      - name: Upload the windows binary artifacts
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: built/Package/tcc_${{ github.event.release.tag_name }}_amd64.deb
          asset_name: TinyCC_Installer_ubuntu64.deb
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: false

  build-centos:
    name: RedHat
    permissions:
        contents: write
        packages: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    container: quay.io/centos/centos:stream9
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Prepare
        run: |
          dnf install git make cmake gcc gcc-c++ binutils glibc-devel valgrind autoconf libtool bison automake libxml2-devel sudo which rpmdevtools rpmlint yum-utils -y
      - name: Configure & build & Create RPM Installer from Release
        run: |
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release -D BUILD_TESTING=OFF
            cmake --build .
            cpack --config CPackConfig.cmake -G RPM
      - name: Upload RPM binary artifacts
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: built/Package/tcc-${{ github.event.release.tag_name }}-Linux.rpm
          asset_name: TinyCC_Installer_centos64.rpm
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: false

  build-qemu:
    name: ${{ matrix.target }}
    permissions:
        contents: write
        packages: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: armhf
            arch: armv7
          - target: arm64
            arch: aarch64
          - target: riscv64
            arch: riscv64
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.arch }}
          distro:  ubuntu_latest
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p built/Package
          install: |
            apt-get update -q -y
            apt-get install -q -y --no-install-recommends cmake build-essential
          env: |
            # Valgrind on arm will fail if the stack size is larger than 8MB.
            # Set QEMUs stack size to 8MB since Github runners use 16MB default.
            QEMU_STACK_SIZE: 8388608
          run: |
            mkdir build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release -D BUILD_TESTING=OFF
            cmake --build .
            cpack -G DEB
      - name: Upload ${{ matrix.arch }} DEB binary artifacts
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: built/Package/tcc_${{ github.event.release.tag_name }}_${{ matrix.target }}.deb
          asset_name: TinyCC_Installer_${{ matrix.target }}.deb
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: false
